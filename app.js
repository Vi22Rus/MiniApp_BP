// Version: 1.0.1
// Last updated: 2025-09-26
// –í–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞: app.js (219 —Å—Ç—Ä–æ–∫)
// –î–æ–º (Club Royal)
const homeCoords = { lat: 12.96933724471163, lng: 100.88800963156544 };

// –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è
let userCoords = null;
let nearbyItems = []; // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Å—Ç

// –°—Å—ã–ª–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∫–∞—Ñ–µ
const geoCafeLinks = [
    "https://maps.app.goo.gl/1Ubzy3TB3hCdG2YR8",
    "https://maps.app.goo.gl/fCCogyeGKWqJca8g7",
    "https://maps.app.goo.gl/Fba5C2aJVW7YxLz98",
    "https://maps.app.goo.gl/UagUbAPDmdJBAbCJ6",
    "https://maps.app.goo.gl/dXaCX7UgmriNPEpm8",
    "https://maps.app.goo.gl/Zn15kwEB5i9bfJGL6",
    "https://maps.app.goo.gl/VyE7D7gwHRL4nMNc6",
    "https://maps.app.goo.gl/DwNiL8531uQVURRZ9",
    "https://maps.app.goo.gl/VFFio7Q6t9qgJk4A9",
    "https://maps.app.goo.gl/UpRFKn6nAgTa1sNS8",
    "https://maps.app.goo.gl/fn868NKBZYGE4tUJ7",
    "https://maps.app.goo.gl/d6Wp4s38aTAPBCFz9",
    "https://maps.app.goo.gl/LGssrnWfy3KEZJ9u6",
    "https://maps.app.goo.gl/zPpiXtiNQts6f1Tb6",
    "https://maps.app.goo.gl/rFeQbBftxVTd2M6j9"
];

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è (Haversine)
function getDistance([lat1, lon1], [lat2, lon2]) {
    const toRad = d => d * Math.PI / 180;
    const R = 6371; 
    const dLat = toRad(lat2 - lat1);
    const dLon = toRad(lon2 - lon1);
    const a = Math.sin(dLat/2)**2 + Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLon/2)**2;
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    return (R * c).toFixed(1);
}

// –ó–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
document.addEventListener('DOMContentLoaded', () => {
    // –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è
    document.getElementById('locateBtn').addEventListener('click', () => {
        if (!navigator.geolocation) {
            alert('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º');
            return;
        }
        navigator.geolocation.getCurrentPosition(pos => {
            userCoords = [pos.coords.latitude, pos.coords.longitude];
            updateNearbyItems();
            renderActivities(activities);
            renderContacts(points);
            renderNearbyBlock();
        }, () => alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'));
    });

    updateCountdown();
    setInterval(updateCountdown, 3600000);

    initTabs();
    initFilters();
    initGeoCafeButtons(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –∫–∞—Ñ–µ
    renderActivities(activities);
    renderContacts(points);
    renderNearbyBlock();

    document.getElementById('closeModal').addEventListener('click', closeModal);
    document.getElementById('modalOverlay').addEventListener('click', e => {
        if (e.target.id === 'modalOverlay') closeModal();
    });
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –∫–∞—Ñ–µ –≤–æ –≤–∫–ª–∞–¥–∫–µ –ì–µ–æ
function initGeoCafeButtons() {
    const buttons = document.querySelectorAll('.geo-cafe-btn');
    buttons.forEach((button, index) => {
        if (geoCafeLinks[index]) {
            button.addEventListener('click', () => {
                window.open(geoCafeLinks[index], '_blank');
            });
        }
    });
}


// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Å—Ç
function updateNearbyItems() {
    if (!userCoords) return;
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –º–µ—Å—Ç–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    const allPlaces = [...points];

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –º–µ—Å—Ç –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    activities.forEach(activity => {
        if (activity.coords && activity.type === 'sight') {
            allPlaces.push({
                name: activity.name,
                coords: activity.coords,
                icon: getIconForActivity(activity.name),
                source: 'calendar'
            });
        }
    });

    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    const placesWithDistance = allPlaces.map(place => ({
        ...place,
        distance: parseFloat(getDistance(userCoords, [place.coords.lat, place.coords.lng]))
    })).sort((a, b) => a.distance - b.distance);
    
    // –ë–µ—Ä–µ–º 5 –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Å—Ç
    nearbyItems = placesWithDistance.slice(0, 5);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
function getIconForActivity(name) {
    const icons = {
        'Mini Siam': 'üèõÔ∏è',
        '–î–µ—Ä–µ–≤–Ω—è —Å–ª–æ–Ω–æ–≤': 'üêò',
        '–î–µ–ª—å—Ñ–∏–Ω–∞—Ä–∏—É–º': 'üê¨',
        '–°–∞–¥ –ù–æ–Ω–≥ –ù—É—á': 'üå∫',
        '–ú—É–∑–µ–π –∏—Å–∫—É—Å—Å—Ç–≤ 3D': 'üé®',
        '–ê—é—Ç—Ç–∞–π—è': '‚õ©Ô∏è',
        '–ó–æ–æ–ø–∞—Ä–∫ –ö—Ö–∞–æ –ö—Ö–µ–æ': 'ü¶í',
        '–ü–ª–∞–≤—É—á–∏–π —Ä—ã–Ω–æ–∫': 'üõ∂'
    };
    return icons[name] || 'üìç';
}

// –†–µ–Ω–¥–µ—Ä –±–ª–æ–∫–∞ "–†—è–¥–æ–º"
function renderNearbyBlock() {
    const container = document.getElementById('nearbyItems');
    if (nearbyItems.length === 0) {
        container.innerHTML = `<div class="empty-state">–ù–∞–∂–º–∏—Ç–µ "–ü–æ–ª—É—á–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ" —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Å—Ç–∞</div>`;
        return;
    }
    
    container.innerHTML = nearbyItems.map(item => `
        <div class="nearby-item">
            <span class="icon">${item.icon}</span>
            <span class="name">${item.name}</span>
            <span class="distance">${item.distance} –∫–º</span>
        </div>
    `).join('');
}


// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
function showModal(place) {
    let content = `<h3>${place.icon ? place.icon + ' ' : ''}${place.name}</h3>`;
    
    if (place.tips) {
        content += `<p>üí° ${place.tips}</p>`;
    }
    
    const fromHome = `${homeCoords.lat},${homeCoords.lng}`;
    const to = `${place.coords.lat},${place.coords.lng}`;
    
    content += `<p><a href="https://www.google.com/maps/dir/?api=1&origin=${fromHome}&destination=${to}" target="_blank">üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç –æ—Ç –¥–æ–º–∞</a></p>`;

    if (userCoords) {
        const userFrom = `${userCoords[0]},${userCoords[1]}`;
        content += `<p><a href="https://www.google.com/maps/dir/?api=1&origin=${userFrom}&destination=${to}" target="_blank">üìç –ú–∞—Ä—à—Ä—É—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è</a></p>`;
        content += `<p>üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${place.distance} –∫–º</p>`;
    }
    
    document.getElementById('modalBody').innerHTML = content;
    document.getElementById('modalOverlay').classList.add('active');
}

// –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ –ö–∞–ª–µ–Ω–¥–∞—Ä—å
const kidsLeisure = [
    { name: 'Mini Siam', date: '01.01.2026', coords: { lat: 12.9554157, lng: 100.9088538 }, tips: '–ü–∞—Ä–∫ –º–∏–Ω–∏–∞—Ç—é—Ä –ø–æ–¥ –æ—Ç–∫—Ä—ã—Ç—ã–º –Ω–µ–±–æ–º, –≤–æ–∑—å–º–∏—Ç–µ –≥–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä.', type: 'sight' },
    { name: '–î–µ—Ä–µ–≤–Ω—è —Å–ª–æ–Ω–æ–≤', date: '04.01.2026', coords: { lat: 12.91604299, lng: 100.93883441 }, tips: '–ö–æ—Ä–º–ª–µ–Ω–∏–µ —Å–ª–æ–Ω–æ–≤ –∏ –∫–∞—Ç–∞–Ω–∏–µ –Ω–∞ –Ω–∏—Ö. –®–æ—É —Å–ª–æ–Ω–æ–≤ (14:30‚Äì16:00).', type: 'sight' },
    { name: '–î–µ–ª—å—Ñ–∏–Ω–∞—Ä–∏—É–º', date: '07.01.2026', coords: { lat: 12.95222191, lng: 100.93617557 }, tips: '–®–æ—É –¥–µ–ª—å—Ñ–∏–Ω–æ–≤ –≤ 15:00.', type: 'sight' },
    { name: '–°–∞–¥ –ù–æ–Ω–≥ –ù—É—á', date: '11.01.2026', coords: { lat: 12.76575858, lng: 100.93505629 }, tips: '–ù–∞–π–¥–∏—Ç–µ —à–æ—É —Å–ª–æ–Ω–æ–≤ –∏ —Å–∞–¥ —Ä–∞–Ω–æ —É—Ç—Ä–æ–º.', type: 'sight' },
    { name: '–ú—É–∑–µ–π –∏—Å–∫—É—Å—Å—Ç–≤ 3D', date: '13.01.2026', coords: { lat: 12.94832322, lng: 100.88976288 }, tips: '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ç–æ–∑–æ–Ω—ã.', type: 'sight' },
    { name: '–ê—é—Ç—Ç–∞–π—è', date: '16.01.2026', coords: { lat: 14.35741905, lng: 100.56757512 }, tips: '–ü–æ—Å–µ—Ç–∏—Ç–µ —Ö—Ä–∞–º—ã.', type: 'sight' },
    { name: '–ó–æ–æ–ø–∞—Ä–∫ –ö—Ö–∞–æ –ö—Ö–µ–æ', date: '19.01.2026', coords: { lat: 13.21500644, lng: 101.05700099 }, tips: '–ö–æ—Ä–º–ª–µ–Ω–∏–µ –∂–∏—Ä–∞—Ñ–æ–≤ –≤ 15:00.', type: 'sight' },
    { name: '–ü–ª–∞–≤—É—á–∏–π —Ä—ã–Ω–æ–∫', date: '22.01.2026', coords: { lat: 12.86799376, lng: 100.90469404 }, tips: '–§—Ä—É–∫—Ç—ã —É –ª–æ–¥–æ—á–Ω–∏–∫–æ–≤.', type: 'sight' }
];

function generateBeachDays() {
    const used = kidsLeisure.map(x => x.date), days = [];
    const start = new Date('2025-12-29'), end = new Date('2026-01-26');
    for (let d = new Date(start); d <= end; d.setDate(d.getDate() + 1)) {
        const date = d.toLocaleDateString('ru-RU');
        if (!used.includes(date)) {
            days.push({ type: 'sea', name: '–ü–ª—è–∂–∏–Ω–≥ –∏ –ü—Ä–æ–≥—É–ª–∏–Ω–≥', date, coords: null, tips: '–û—Ç–¥—ã—Ö –Ω–∞ –ø–ª—è–∂–µ –∏ –ø—Ä–æ–≥—É–ª–∫–∞ –ø–æ –Ω–∞–±–µ—Ä–µ–∂–Ω–æ–π –ù–∞–∫–ª—É–∞.' });
        }
    }
    return days;
}

const activities = [...generateBeachDays(), ...kidsLeisure].sort((a,b) => {
    const da = a.date.split('.').reverse().join('-'), db = b.date.split('.').reverse().join('-');
    return new Date(da) - new Date(db);
});

// –°—á—ë—Ç—á–∏–∫
const startTrip = new Date('2025-12-29'), endTrip = new Date('2026-01-26');
function updateCountdown() {
    const now = new Date();
    const label = now < startTrip ? '–î–æ –ø–æ–µ–∑–¥–∫–∏:' : now <= endTrip ? '–î–æ –æ—Ç—ä–µ–∑–¥–∞:' : '–ü–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!';
    const days = now < startTrip ? Math.ceil((startTrip - now) / 864e5) : now <= endTrip ? Math.ceil((endTrip - now) / 864e5) : 0;
    document.getElementById('countdownText').textContent = label;
    document.getElementById('days').textContent = days > 0 ? days : '‚úî';
    document.querySelector('.countdown-label').textContent = days > 0 ? '–¥–Ω–µ–π' : '';
}


// –ü—Ä–∏–≤—è–∑–∫–∞ –∫–Ω–æ–ø–æ–∫ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ"
function bindDetailButtons() {
    document.querySelectorAll('.details').forEach(btn => {
        btn.onclick = () => {
            const act = activities.find(x => x.name === btn.dataset.name && x.date === btn.dataset.date);
            showModal(act);
        };
    });
}

// –†–µ–Ω–¥–µ—Ä –≤–∫–ª–∞–¥–∫–∏ –ö–∞–ª–µ–Ω–¥–∞—Ä—å
function renderActivities(list) {
    const grid = document.getElementById('activitiesGrid');
    grid.innerHTML = list.map(a => {
        let icon = a.type === 'sea' ? 'üèñÔ∏è ' : '';
        if (a.type === 'sight') {
            icon = getIconForActivity(a.name) + ' ';
        }
        
        const prices = {
            'Mini Siam': `<p class="price-tag">–í–∑—Ä–æ—Å–ª—ã–π 230 ‡∏ø / –î–µ—Ç—Å–∫–∏–π 130 ‡∏ø</p>`,
            '–î–µ—Ä–µ–≤–Ω—è —Å–ª–æ–Ω–æ–≤': `<p class="price-tag">–í–∑—Ä–æ—Å–ª—ã–π 650 ‡∏ø / –î–µ—Ç—Å–∫–∏–π 500 ‡∏ø</p>`,
            '–î–µ–ª—å—Ñ–∏–Ω–∞—Ä–∏—É–º': `<p class="price-tag">–í–∑—Ä–æ—Å–ª—ã–π 630 ‡∏ø / –î–µ—Ç—Å–∫–∏–π 450 ‡∏ø</p>`,
            '–°–∞–¥ –ù–æ–Ω–≥ –ù—É—á': `<p class="price-tag">–í–∑—Ä–æ—Å–ª—ã–π 420 ‡∏ø / –î–µ—Ç—Å–∫–∏–π 320 ‡∏ø</p>`,
            '–ú—É–∑–µ–π –∏—Å–∫—É—Å—Å—Ç–≤ 3D': `<p class="price-tag">–í–∑—Ä–æ—Å–ª—ã–π 235 ‡∏ø / –î–µ—Ç—Å–∫–∏–π 180 ‡∏ø</p>`,
            '–ó–æ–æ–ø–∞—Ä–∫ –ö—Ö–∞–æ –ö—Ö–µ–æ': `<p class="price-tag">–í–∑—Ä–æ—Å–ª—ã–π 350 ‡∏ø / –î–µ—Ç—Å–∫–∏–π 120 ‡∏ø</p>`,
        };
        const priceLine = prices[a.name] || '';
        
        const dist = userCoords && a.coords ? `<p class="distance-tag">‚âà${getDistance(userCoords, [a.coords.lat, a.coords.lng])} –∫–º –æ—Ç –≤–∞—Å</p>` : '';

        return `
            <div class="card">
                <h3>${icon}${a.name}</h3>
                <p>${a.date}</p>
                ${priceLine}
                ${dist}
                ${a.coords ? `<button class="details" data-name="${a.name}" data-date="${a.date}">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</button>` : ''}
            </div>
        `;
    }).join('');
    bindDetailButtons();
}

// –ú–æ–¥–∞–ª–∫–∞ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
function showContactModal(place) {
    let content = `<h3>${place.icon} ${place.name}</h3>`;
    const to = `${place.coords.lat},${place.coords.lng}`;
    
    if (userCoords) {
        content += `<p class="distance-tag">‚âà${getDistance(userCoords, [place.coords.lat, place.coords.lng])} –∫–º –æ—Ç –≤–∞—Å</p>`;
        const userFrom = `${userCoords[0]},${userCoords[1]}`;
        content += `<p><a href="https://www.google.com/maps/dir/?api=1&origin=${userFrom}&destination=${to}" target="_blank">üìç –ú–∞—Ä—à—Ä—É—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è</a></p>`;
    }
    
    const fromHome = `${homeCoords.lat},${homeCoords.lng}`;
    content += `<p><a href="https://www.google.com/maps/dir/?api=1&origin=${fromHome}&destination=${to}" target="_blank">üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç –æ—Ç –¥–æ–º–∞</a></p>`;

    document.getElementById('modalBody').innerHTML = content;
    document.getElementById('modalOverlay').classList.add('active');
}

// –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ –ú–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ MO Play Kidz)
const points = [
    { name: 'MO Play Kidz', coords: {lat: 12.935051, lng: 100.882722}, icon: 'üë∂' }
];

// –†–µ–Ω–¥–µ—Ä –≤–∫–ª–∞–¥–∫–∏ –ú–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
function renderContacts(list) {
    let items = list.slice();
    if (userCoords) {
        items = items.map(p => ({ ...p, distance: parseFloat(getDistance(userCoords, [p.coords.lat, p.coords.lng])) }));
        items.sort((a,b) => a.distance - b.distance);
    }
    
    const grid = document.getElementById('contactsGrid');
    grid.innerHTML = items.map(p => {
        const distTag = p.distance !== undefined ? `<span class="distance-tag">‚âà${p.distance.toFixed(1)} –∫–º</span>` : '';
        return `
            <button class="contact-btn" onclick='showContactModal(${JSON.stringify(p)})'>
                <span class="icon">${p.icon}</span>
                <span>${p.name}</span>
                ${distTag}
            </button>
        `;
    }).join('');
}


// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–æ–∫
function initTabs() {
    document.querySelectorAll('.tab-button').forEach(btn => {
        btn.addEventListener('click', () => {
            document.querySelectorAll('.tab-button').forEach(b => b.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
            btn.classList.add('active');
            document.getElementById(btn.dataset.tab).classList.add('active');
        });
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
function initFilters() {
    document.querySelectorAll('.filter-btn').forEach(f => {
        f.addEventListener('click', () => {
            document.querySelectorAll('.filter-btn').forEach(x => x.classList.remove('active'));
            f.classList.add('active');
            const filtered = f.dataset.filter === 'all' ? activities : activities.filter(a => a.type === f.dataset.filter);
            renderActivities(filtered);
            localStorage.setItem('filter', f.dataset.filter);
        });
    });
    const saved = localStorage.getItem('filter') || 'all';
    document.querySelector(`.filter-btn[data-filter="${saved}"]`)?.click();
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏
function closeModal() {
    document.getElementById('modalOverlay').classList.remove('active');
}
