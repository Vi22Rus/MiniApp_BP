// Version: 1.0.3
// Last updated: 2025-09-26
// –í–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞: app.js (278 —Å—Ç—Ä–æ–∫)
// –î–æ–º (Club Royal)
const homeCoords = { lat: 12.96933724471163, lng: 100.88800963156544 };

// –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è
let userCoords = null;
let nearbyItems = []; // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Å—Ç

// –°—Å—ã–ª–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∫–∞—Ñ–µ (–∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∂–∞—Ç–∏–µ)
const geoCafeLinks = [
    "https://maps.app.goo.gl/1Ubzy3TB3hCdG2YR8",
    "https://maps.app.goo.gl/fCCogyeGKWqJca8g7",
    "https://maps.app.goo.gl/Fba5C2aJVW7YxLz98",
    "https://maps.app.goo.gl/UagUbAPDmdJBAbCJ6",
    "https://maps.app.goo.gl/dXaCX7UgmriNPEpm8",
    "https://maps.app.goo.gl/Zn15kwEB5i9bfJGL6",
    "https://maps.app.goo.gl/VyE7D7gwHRL4nMNc6",
    "https://maps.app.goo.gl/DwNiL8531uQVURRZ9",
    "https://maps.app.goo.gl/VFFio7Q6t9qgJk4A9",
    "https://maps.app.goo.gl/UpRFKn6nAgTa1sNS8",
    "https://maps.app.goo.gl/fn868NKBZYGE4tUJ7",
    "https://maps.app.goo.gl/d6Wp4s38aTAPBCFz9",
    "https://maps.app.goo.gl/LGssrnWfy3KEZJ9u6",
    "https://maps.app.goo.gl/zPpiXtiNQts6f1Tb6",
    "https://maps.app.goo.gl/rFeQbBftxVTd2M6j9"
];

// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∫–∞—Ñ–µ (–¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –∏ —Ä–∞—Å—á–µ—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏)
const geoCafeCoords = [
    [12.965314728870327, 100.88574547083675], // Pad Thai Shop
    [12.964959752753911, 100.88655104216504], // Indian food
    [12.965151141707688, 100.88674436342762], // Tony seafood
    [12.964288806741925, 100.88816176884599], // SIAM
    [12.96424632513826, 100.88873268926864], // –¢–∞–π—Å–∫–æ–µ –∫–∞—Ñ–µ
    [12.964275050492303, 100.88867431363093], // COFFEE CORNER
    [12.967898770765563, 100.89741326647155], // Coconut restaurant
    [12.973265034689499, 100.90657393095435], // –†—ã–±–Ω—ã–π —Ä—ã–Ω–æ–∫
    [12.968006641294641, 100.89704079447756], // 3 Tolstyaka
    [12.96748945294801, 100.88317093728782], // Thai on beach
    [12.892621251136807, 100.87323076484746], // Tum Yum Bar
    [12.909346981806133, 100.85799998332298], // –º–∞–∫–∞—à–Ω–∏—Ü–∞
    [12.909615777640497, 100.86413037030111], // BAR MANGAL B-B-Q
    [12.909461552901218, 100.86416750079316], // kruatabird
    [12.91753238629045, 100.86705154538753]  // CHAO DOI COFFEE
];

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è (Haversine)
function getDistance([lat1, lon1], [lat2, lon2]) {
    const toRad = d => d * Math.PI / 180;
    const R = 6371; 
    const dLat = toRad(lat2 - lat1);
    const dLon = toRad(lon2 - lon1);
    const a = Math.sin(dLat/2)**2 + Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLon/2)**2;
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    return (R * c).toFixed(1);
}

// –ó–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
document.addEventListener('DOMContentLoaded', () => {
    // –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è
    document.getElementById('locateBtn').addEventListener('click', () => {
        if (!navigator.geolocation) {
            alert('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º');
            return;
        }
        navigator.geolocation.getCurrentPosition(pos => {
            userCoords = [pos.coords.latitude, pos.coords.longitude];
            updateNearbyItems();
            renderActivities(activities);
            renderContacts(points);
            renderNearbyBlock();
            updateGeoCafeDistances(); // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –¥–æ –∫–∞—Ñ–µ
        }, () => alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'));
    });

    updateCountdown();
    setInterval(updateCountdown, 3600000);

    initTabs();
    initFilters();
    initGeoCafeButtons(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –∫–∞—Ñ–µ
    renderActivities(activities);
    renderContacts(points);
    renderNearbyBlock();

    document.getElementById('closeModal').addEventListener('click', closeModal);
    document.getElementById('modalOverlay').addEventListener('click', e => {
        if (e.target.id === 'modalOverlay') closeModal();
    });
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –∫–∞—Ñ–µ –≤–æ –≤–∫–ª–∞–¥–∫–µ –ì–µ–æ
function initGeoCafeButtons() {
    const buttons = document.querySelectorAll('.geo-cafe-btn');
    buttons.forEach((button, index) => {
        let pressTimer;
        let isLongPress = false;

        const startPress = (e) => {
            e.preventDefault();
            isLongPress = false;
            pressTimer = window.setTimeout(() => {
                isLongPress = true;
                if (!userCoords) {
                    alert('–°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ".');
                    return;
                }
                if (geoCafeCoords[index]) {
                    const destination = geoCafeCoords[index].join(',');
                    const origin = userCoords.join(',');
                    const url = `https://www.google.com/maps/dir/?api=1&origin=${origin}&destination=${destination}`;
                    window.open(url, '_blank');
                }
            }, 800); // 800ms –¥–ª—è –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
        };

        const cancelPress = () => {
            clearTimeout(pressTimer);
            if (!isLongPress) {
                // –≠—Ç–æ –æ–±—ã—á–Ω—ã–π –∫–ª–∏–∫
                if (geoCafeLinks[index]) {
                    window.open(geoCafeLinks[index], '_blank');
                }
            }
        };

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º—ã—à–∏
        button.addEventListener('mousedown', startPress);
        button.addEventListener('mouseup', cancelPress);
        button.addEventListener('mouseleave', () => clearTimeout(pressTimer));

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–µ–Ω—Å–æ—Ä–Ω—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤
        button.addEventListener('touchstart', startPress);
        button.addEventListener('touchend', cancelPress);
        button.addEventListener('touchcancel', () => clearTimeout(pressTimer));
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö –∫–∞—Ñ–µ
function updateGeoCafeDistances() {
    if (!userCoords) return;
    const buttons = document.querySelectorAll('.geo-cafe-btn');
    buttons.forEach((button, index) => {
        if (geoCafeCoords[index]) {
            const distance = getDistance(userCoords, geoCafeCoords[index]);
            let distSpan = button.querySelector('.distance-tag');
            if (!distSpan) {
                distSpan = document.createElement('span');
                distSpan.className = 'distance-tag';
                button.appendChild(distSpan);
            }
            distSpan.textContent = ` ‚âà ${distance} –∫–º`;
        }
    });
}


// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Å—Ç
function updateNearbyItems() {
    if (!userCoords) return;
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –º–µ—Å—Ç–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    const allPlaces = [...points];

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –º–µ—Å—Ç –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    activities.forEach(activity => {
        if (activity.coords && activity.type === 'sight') {
            allPlaces.push({
                name: activity.name,
                coords: activity.coords,
                icon: getIconForActivity(activity.name),
                source: 'calendar'
            });
        }
    });

    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    const placesWithDistance = allPlaces.map(place => ({
        ...place,
        distance: parseFloat(getDistance(userCoords, [place.coords.lat, place.coords.lng]))
    })).sort((a, b) => a.distance - b.distance);
    
    // –ë–µ—Ä–µ–º 5 –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Å—Ç
    nearbyItems = placesWithDistance.slice(0, 5);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
function getIconForActivity(name) {
    const icons = {
        'Mini Siam': 'üèõÔ∏è',
        '–î–µ—Ä–µ–≤–Ω—è —Å–ª–æ–Ω–æ–≤': 'üêò',
        '–î–µ–ª—å—Ñ–∏–Ω–∞—Ä–∏—É–º': 'üê¨',
        '–°–∞–¥ –ù–æ–Ω–≥ –ù—É—á': 'üå∫',
        '–ú—É–∑–µ–π –∏—Å–∫—É—Å—Å—Ç–≤ 3D': 'üé®',
        '–ê—é—Ç—Ç–∞–π—è': '‚õ©Ô∏è',
        '–ó–æ–æ–ø–∞—Ä–∫ –ö—Ö–∞–æ –ö—Ö–µ–æ': 'ü¶í',
        '–ü–ª–∞–≤—É—á–∏–π —Ä—ã–Ω–æ–∫': 'üõ∂'
    };
    return icons[name] || 'üìç';
}

// –†–µ–Ω–¥–µ—Ä –±–ª–æ–∫–∞ "–†—è–¥–æ–º"
function renderNearbyBlock() {
    const container = document.getElementById('nearbyItems');
    if (nearbyItems.length === 0) {
        container.innerHTML = `<div class="empty-state">–ù–∞–∂–º–∏—Ç–µ "–ü–æ–ª—É—á–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ" —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Å—Ç–∞</div>`;
        return;
    }
    
    container.innerHTML = nearbyItems.map(item => `
        <div class="nearby-item">
            <span class="icon">${item.icon}</span>
            <span class="name">${item.name}</span>
            <span class="distance">${item.distance} –∫–º</span>
        </div>
    `).join('');
}


// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
function showModal(place) {
    let content = `<h3>${place.icon ? place.icon + ' ' : ''}${place.name}</h3>`;
    
    if (place.tips) {
        content += `<p>üí° ${place.tips}</p>`;
    }
    
    const fromHome = `${homeCoords.lat},${homeCoords.lng}`;
    const to = `${place.coords.lat},${place.coords.lng}`;
    
    content += `<p><a href="https://www.google.com/maps/dir/?api=1&origin=${fromHome}&destination=${to}" target="_blank">üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç –æ—Ç –¥–æ–º–∞</a></p>`;

    if (userCoords) {
        const userFrom = `${userCoords[0]},${userCoords[1]}`;
        content += `<p><a href="https://www.google.com/maps/dir/?api=1&origin=${userFrom}&destination=${to}" target="_blank">üìç –ú–∞—Ä—à—Ä—É—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è</a></p>`;
        content += `<p>üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${place.distance} –∫–º</p>`;
    }
    
    document.getElementById('modalBody').innerHTML = content;
    document.getElementById('modalOverlay').classList.add('active');
}

// –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ –ö–∞–ª–µ–Ω–¥–∞—Ä—å
const kidsLeisure = [
    { name: 'Mini Siam', date: '01.01.2026', coords: { lat: 12.9554157, lng: 100.9088538 }, tips: '–ü–∞—Ä–∫ –º–∏–Ω–∏–∞—Ç—é—Ä –ø–æ–¥ –æ—Ç–∫—Ä—ã—Ç—ã–º –Ω–µ–±–æ–º, –≤–æ–∑—å–º–∏—Ç–µ –≥–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä.', type: 'sight' },
    { name: '–î–µ—Ä–µ–≤–Ω—è —Å–ª–æ–Ω–æ–≤', date: '04.01.2026', coords: { lat: 12.91604299, lng: 100.93883441 }, tips: '–ö–æ—Ä–º–ª–µ–Ω–∏–µ —Å–ª–æ–Ω–æ–≤ –∏ –∫–∞—Ç–∞–Ω–∏–µ –Ω–∞ –Ω–∏—Ö. –®–æ—É —Å–ª–æ–Ω–æ–≤ (14:30‚Äì16:00).', type: 'sight' },
    { name: '–î–µ–ª—å—Ñ–∏–Ω–∞—Ä–∏—É–º', date: '07.01.2026', coords: { lat: 12.95222191, lng: 100.93617557 }, tips: '–®–æ—É –¥–µ–ª—å—Ñ–∏–Ω–æ–≤ –≤ 15:00.', type: 'sight' },
    { name: '–°–∞–¥ –ù–æ–Ω–≥ –ù—É—á', date: '11.01.2026', coords: { lat: 12.76575858, lng: 100.93505629 }, tips: '–ù–∞–π–¥–∏—Ç–µ —à–æ—É —Å–ª–æ–Ω–æ–≤ –∏ —Å–∞–¥ —Ä–∞–Ω–æ —É—Ç—Ä–æ–º.', type: 'sight' },
    { name: '–ú—É–∑–µ–π –∏—Å–∫—É—Å—Å—Ç–≤ 3D', date: '13.01.2026', coords: { lat: 12.94832322, lng: 100.88976288 }, tips: '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ç–æ–∑–æ–Ω—ã.', type: 'sight' },
    { name: '–ê—é—Ç—Ç–∞–π—è', date: '16.01.2026', coords: { lat: 14.35741905, lng: 100.56757512 }, tips: '–ü–æ—Å–µ—Ç–∏—Ç–µ —Ö—Ä–∞–º—ã.', type: 'sight' },
    { name: '–ó–æ–æ–ø–∞—Ä–∫ –ö—Ö–∞–æ –ö—Ö–µ–æ', date: '19.01.2026', coords: { lat: 13.21500644, lng: 101.05700099 }, tips: '–ö–æ—Ä–º–ª–µ–Ω–∏–µ –∂–∏—Ä–∞—Ñ–æ–≤ –≤ 15:00.', type: 'sight' },
    { name: '–ü–ª–∞–≤—É—á–∏–π —Ä—ã–Ω–æ–∫', date: '22.01.2026', coords: { lat: 12.86799376, lng: 100.90469404 }, tips: '–§—Ä—É–∫—Ç—ã —É –ª–æ–¥–æ—á–Ω–∏–∫–æ–≤.', type: 'sight' }
];

function generateBeachDays() {
    const used = kidsLeisure.map(x => x.date), days = [];
    const start = new Date('2025-12-29'), end = new Date('2026-01-26');
    for (let d = new Date(start); d <= end; d.setDate(d.getDate() + 1)) {
        const date = d.toLocaleDateString('ru-RU');
        if (!used.includes(date)) {
            days.push({ type: 'sea', name: '–ü–ª—è–∂–∏–Ω–≥ –∏ –ü—Ä–æ–≥—É–ª–∏–Ω–≥', date, coords: null, tips: '–û—Ç–¥—ã—Ö –Ω–∞ –ø–ª—è–∂–µ –∏ –ø—Ä–æ–≥—É–ª–∫–∞ –ø–æ –Ω–∞–±–µ—Ä–µ–∂–Ω–æ–π –ù–∞–∫–ª—É–∞.' });
        }
    }
    return days;
}

const activities = [...generateBeachDays(), ...kidsLeisure].sort((a,b) => {
    const da = a.date.split('.').reverse().join('-'), db = b.date.split('.').reverse().join('-');
    return new Date(da) - new Date(db);
});

// –°—á—ë—Ç—á–∏–∫
const startTrip = new Date('2025-12-29'), endTrip = new Date('2026-01-26');
function updateCountdown() {
    const now = new Date();
    const label = now < startTrip ? '–î–æ –ø–æ–µ–∑–¥–∫–∏:' : now <= endTrip ? '–î–æ –æ—Ç—ä–µ–∑–¥–∞:' : '–ü–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!';
    const days = now < startTrip ? Math.ceil((startTrip - now) / 864e5) : now <= endTrip ? Math.ceil((endTrip - now) / 864e5) : 0;
    document.getElementById('countdownText').textContent = label;
    document.getElementById('days').textContent = days > 0 ? days : '‚úî';
    document.querySelector('.countdown-label').textContent = days > 0 ? '–¥–Ω–µ–π' : '';
}


// –ü—Ä–∏–≤—è–∑–∫–∞ –∫–Ω–æ–ø–æ–∫ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ"
function bindDetailButtons() {
    document.querySelectorAll('.details').forEach(btn => {
        btn.onclick = () => {
            const act = activities.find(x => x.name === btn.dataset.name && x.date === btn.dataset.date);
            showModal(act);
        };
    });
}

// –†–µ–Ω–¥–µ—Ä –≤–∫–ª–∞–¥–∫–∏ –ö–∞–ª–µ–Ω–¥–∞—Ä—å
function renderActivities(list) {
    const grid = document.getElementById('activitiesGrid');
    grid.innerHTML = list.map(a => {
        let icon = a.type === 'sea' ? 'üèñÔ∏è ' : '';
        if (a.type === 'sight') {
            icon = getIconForActivity(a.name) + ' ';
        }
        
        const prices = {
            'Mini Siam
